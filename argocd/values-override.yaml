global:
  domain: y-argocd.${DOMAIN}

dex:
  enabled: false

notifications:
  enabled: true
  argocdUrl: "https://y-argocd.${DOMAIN}"
  notifiers:
    service.slack: |
      token: ${SLACK_TOKEN}

configs:
  cm:
    admin.enabled: false
    oidc.config: |
      name: Keycloak
      issuer: https://keycloak.hav-ing.store/auth/realms/gitlab-oauth
      clientID: oidc.argocd.${DOMAIN}
      clientSecret: $oidc.keycloak.clientSecret
      requestedIDTokenClaims:
        roles:
          essential: true  
        groups:
          essential: true
      requestedScopes:
        - openid
        - profile
        - email
  rbac:
    create: true
    scopes: '[groups, roles]'    
    policy.default: role:none
    policy.csv: |
      # ───── Claim → 전역 Role 매핑 ─────
      g, /관리자,                           role:admin
      g, /에듀테크/클라우드 개발 Cell,        role:admin
      g, be-developer,                     role:be-developer
      g, fe-developer,                     role:fe-developer
      g, socket-developer,                 role:socket-developer
      g, grp-developer,                    role:grp-developer

      # ───── 전역 Role → 권한 정의 ─────
      p, role:admin, *, *, *, allow

      p, role:be-developer,     applications, *,       lms/*,       allow
      p, role:fe-developer,     applications, *,       cdn/*,       allow
      p, role:socket-developer, applications, *,       socket/*,    allow
      p, role:socket-developer, applications, *,       cdn/*,       allow
      p, role:grp-developer,    applications, *,       tutorus/*,   allow
      p, role:grp-developer,    exec,          create, tutorus/*,   allow

  secret:
    createSecret: true
    argocdServerAdminPassword: "$2a$12$9vgR3l98J4XFDMuHQBe03uXAAg6r4cW7ZI04PbHK8O0VOQttULedW"
    extra:
      oidc.keycloak.clientSecret: jh7SgbiyhaYlnXV47WFAjUWQ5js67zn1

applicationSet:
  enabled: true

redis:
  enabled: true
  persistence:
    enabled: true
    storageClass: standard
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 32Mi
  exporter:
    enabled: false

redis-ha:
  enabled: false
  persistentVolume:
    enabled: false

server:
  service:
    type: NodePort
  ingress:
    enabled: false
    ingressClassName: "nginx"

    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "${DOMAIN}-issuer"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true" 

    extraTls:
      - hosts:
        - y-argocd.${DOMAIN}
        secretName: argocd-tls

  ## Argo CD extensions
  ## This function in tech preview stage, do expect instability or breaking changes in newer versions.
  ## Ref: https://github.com/argoproj-labs/argocd-extension-installer
  ## When you enable extensions, you need to configure RBAC of logged in Argo CD user.
  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#the-extensions-resource
  extensions:
    enabled: true

  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 64Mi

controller:
  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 64Mi

repoServer:
  persistence:
    enabled: true
    storageClass: standard
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 32Mi